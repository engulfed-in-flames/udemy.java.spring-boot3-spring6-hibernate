package com.udemy.advancedhibernate.demo.dao;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.udemy.advancedhibernate.demo.entity.Course;
import com.udemy.advancedhibernate.demo.entity.Instructor;
import com.udemy.advancedhibernate.demo.entity.InstructorDetail;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import jakarta.transaction.Transactional;

@Repository
public class AppDAOImpl implements AppDAO {

	EntityManager entityManager;
	
	public AppDAOImpl(EntityManager entityManager) {
		this.entityManager = entityManager;
	}

	// Instructor
	@Override
	@Transactional
	public void save(Instructor instructor) {
		
		entityManager.persist(instructor);
	}
	
	@Override
	public Instructor findInstructorById(int id) {
		
		return entityManager.find(Instructor.class, id);
	}
	
	@Override
	@Transactional
	public void updateInstructor(Instructor instructor) {
		
		entityManager.merge(instructor);
	}

	@Override
	@Transactional
	public void deleteInstructorById(int id) {
		
		// When course entity doesn't exist
		// Instructor instructor = findInstructorById(id);
		
		// When course entity exists
		Instructor instructor = entityManager.find(Instructor.class, id);
		List<Course> courses = instructor.getCourses();
		
		for (Course course : courses) {
			course.setInstructor(null);
		}
		
		entityManager.remove(instructor);
	}

	// InstructorDetail
	@Override
	public InstructorDetail findInstructorDetailById(int id) {
		
		return entityManager.find(InstructorDetail.class, id);
	}

	@Override
	@Transactional
	public void deleteInstructorDetailById(int id) {
		
		InstructorDetail instructorDetail = findInstructorDetailById(id);
		
		entityManager.remove(instructorDetail);
	}
	
	// Course
	@Override
	public Course findCourseById(int id) {
	
		return entityManager.find(Course.class, id);
	}
	
	@Override
	public List<Course> findCoursesByInstructorId(int id) {
		
		TypedQuery<Course> query = entityManager.createQuery(
						"from Course where instructor.id = :data", Course.class
						);
		query.setParameter("data", id);
		
		List<Course> courses = query.getResultList();
		return courses;
	}

	
	@Override
	public Instructor findInstructorWithCourses(int id) {
		
		TypedQuery<Instructor> query = entityManager.createQuery(
						"select i from Instructor i "
						+ "JOIN FETCH i.courses "
						+ "where i.id = :data",
						Instructor.class);
		query.setParameter("data", id);
		
		Instructor instructor = query.getSingleResult();
		
		return instructor;
	}
	
	@Override
	@Transactional
	public void updateCourse(Course course) {
		
		entityManager.merge(course);
	}

	@Override
	@Transactional
	public void deleteCourseById(int id) {
		
		Course course = findCourseById(id);
		
		entityManager.remove(course);
	}
}
