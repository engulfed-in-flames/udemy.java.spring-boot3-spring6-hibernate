package com.example.aop.aspect;

import java.util.List;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.aspectj.weaver.ast.Instanceof;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import com.example.aop.entity.Account;

/* 
 * @Order
 * 1. Range : Integer.MIN_VALUE ~ Integer.MAX_VALUE (Negative value allowed)
 * 2. Does not need to be consecutive
 * 3. If the order is the same, it's hard to know which one runs first.  
 */

@Aspect
@Component
@Order(2)
public class LoggingAspect {

	// @Before("execution (public void addAccount())")
	// @Before("execution (* add*(com.example.aop.entity.Account))")
	// @Before("execution (* add*(com.example.aop.entity.Account, ..))")
	// @Before("execution (* add*(..))")
	// @Before("execution (* com.example.aop.dao.AccountDAO.add*(..))")
	/*
	 * @Before("execution (* com.example.aop.dao.*.*(..))") public void
	 * adviceBeforeAddAccount() {
	 * System.out.println("===> @Before advice on addAccount()"); }
	 */

	
	// @Before("pointcutForGeneralPurpose()")
	/*
	 * @Before(
	 * "com.example.aop.aspect.AspectExpression.pointcutNotForGetterAndSetter()")
	 * public void adviceBeforeAddAccountV2() {
	 * 
	 * System.out.println("===> Executing @Before advice v2 on addAccount()"); }
	 */
 	
	
 	@Before("com.example.aop.aspect.AspectExpression.pointcutNotForGetterAndSetter()")
	public void beforeAddAccountV3(JoinPoint joinPoint) {
		// JointPoint has metadata about the method.
		System.out.println("===> Executing @Before advice v2 on addAccount()");
 	
		// Display the method signature
		MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
		System.out.println("\nMethod Signature: " + methodSignature);
		
		// Display the method arguments
		Object[] args = joinPoint.getArgs();
		
		for (Object arg : args) {
			if(arg instanceof Account) {
				Account account = (Account) arg;
				System.out.println("--- Account Info ----");
				System.out.println("Name : " + account.getName());
				System.out.println("Level : " + account.getLevel());
			} else {
				String string = arg.toString();
				System.out.println("Argument: " + string);
			}
		}
 	}
 	
 	@AfterReturning(
 			pointcut = "com.example.aop.aspect.AspectExpression.pointcutForMethodFindAccounts()",
 			returning = "result")
 	public void afterReturningFindAccounts(JoinPoint joinPoint, List<Account> result) {
 			// Display the method signature
 			MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
 			System.out.println("\nMethod Signature: " + methodSignature);
 		
 			// Display the result
 			System.out.println("The result: " + result);
 			
 			// Caller will get the modified result.
 			// The development team should be aware of AOP being used
 	}
 	
 	
}


